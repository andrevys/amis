
--
-- Create model ContentType
--
CREATE TABLE "DJANGO_CONTENT_TYPE" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NAME" NVARCHAR2(100) NULL, "APP_LABEL" NVARCHAR2(100) NULL, "MODEL" NVARCHAR2(100) NULL);
--
-- Alter unique_together for contenttype (1 constraint(s))
--
ALTER TABLE "DJANGO_CONTENT_TYPE" ADD CONSTRAINT "DJANGO_CO_APP_LABEL_76BD3D3B_U" UNIQUE ("APP_LABEL", "MODEL");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'DJANGO_CONTENT_TYPE_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "DJANGO_CONTENT_TYPE_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "DJANGO_CONTENT_TYPE_TR"
BEFORE INSERT ON "DJANGO_CONTENT_TYPE"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "DJANGO_CONTENT_TYPE_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
COMMIT;


--
-- Change Meta options on contenttype
--
--
-- Alter field name on contenttype
--
--
-- MIGRATION NOW PERFORMS OPERATION THAT CANNOT BE WRITTEN AS SQL:
-- Raw Python operation
--
--
-- Remove field name from contenttype
--
ALTER TABLE "DJANGO_CONTENT_TYPE" DROP COLUMN "NAME";
COMMIT;


--
-- Create model Permission
--
CREATE TABLE "AUTH_PERMISSION" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NAME" NVARCHAR2(50) NULL, "CONTENT_TYPE_ID" NUMBER(11) NOT NULL, "CODENAME" NVARCHAR2(100) NULL);
--
-- Create model Group
--
CREATE TABLE "AUTH_GROUP" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NAME" NVARCHAR2(80) NULL UNIQUE);
CREATE TABLE "AUTH_GROUP_PERMISSIONS" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "GROUP_ID" NUMBER(11) NOT NULL, "PERMISSION_ID" NUMBER(11) NOT NULL);
--
-- Create model User
--

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_PERMISSION_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_PERMISSION_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_PERMISSION_TR"
BEFORE INSERT ON "AUTH_PERMISSION"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_PERMISSION_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "AUTH_PERMISSION" ADD CONSTRAINT "AUTH_PERM_CONTENT_T_2F476E4B_F" FOREIGN KEY ("CONTENT_TYPE_ID") REFERENCES "DJANGO_CONTENT_TYPE" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_PERMISSION" ADD CONSTRAINT "AUTH_PERM_CONTENT_T_01AB375A_U" UNIQUE ("CONTENT_TYPE_ID", "CODENAME");
CREATE INDEX "AUTH_PERMI_CONTENT_TY_2F476E4B" ON "AUTH_PERMISSION" ("CONTENT_TYPE_ID");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_GROUP_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_GROUP_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_GROUP_TR"
BEFORE INSERT ON "AUTH_GROUP"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_GROUP_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_GROUP_PERMISSIONS_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_GROUP_PERMISSIONS_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_GROUP_PERMISSIONS_TR"
BEFORE INSERT ON "AUTH_GROUP_PERMISSIONS"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_GROUP_PERMISSIONS_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "AUTH_GROUP_PERMISSIONS" ADD CONSTRAINT "AUTH_GROU_GROUP_ID_B120CBF9_F" FOREIGN KEY ("GROUP_ID") REFERENCES "AUTH_GROUP" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_GROUP_PERMISSIONS" ADD CONSTRAINT "AUTH_GROU_PERMISSIO_84C5C92E_F" FOREIGN KEY ("PERMISSION_ID") REFERENCES "AUTH_PERMISSION" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_GROUP_PERMISSIONS" ADD CONSTRAINT "AUTH_GROU_GROUP_ID__0CD325B0_U" UNIQUE ("GROUP_ID", "PERMISSION_ID");
CREATE INDEX "AUTH_GROUP_GROUP_ID_B120CBF9" ON "AUTH_GROUP_PERMISSIONS" ("GROUP_ID");
CREATE INDEX "AUTH_GROUP_PERMISSION_84C5C92E" ON "AUTH_GROUP_PERMISSIONS" ("PERMISSION_ID");
COMMIT;


--
-- Alter field name on permission
--
ALTER TABLE "AUTH_PERMISSION" MODIFY "NAME" NVARCHAR2(255);
COMMIT;


--
-- Create model UserAdditionalInfo
--
CREATE TABLE "MAIN_USERADDITIONALINFO" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "PASSWORD" NVARCHAR2(128) NULL, "LAST_LOGIN" TIMESTAMP NULL, "IS_SUPERUSER" NUMBER(1) NOT NULL CHECK ("IS_SUPERUSER" IN (0,1)), "USERNAME" NVARCHAR2(150) NULL UNIQUE, "FIRST_NAME" NVARCHAR2(30) NULL, "LAST_NAME" NVARCHAR2(30) NULL, "EMAIL" NVARCHAR2(254) NULL, "IS_STAFF" NUMBER(1) NOT NULL CHECK ("IS_STAFF" IN (0,1)), "IS_ACTIVE" NUMBER(1) NOT NULL CHECK ("IS_ACTIVE" IN (0,1)), "DATE_JOINED" TIMESTAMP NOT NULL, "ROLE" NVARCHAR2(10) NULL, "PHONE" NVARCHAR2(100) NULL);
CREATE TABLE "MAIN_USERADDITIONALINFO_GROUPS" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "USERADDITIONALINFO_ID" NUMBER(11) NOT NULL, "GROUP_ID" NUMBER(11) NOT NULL);
CREATE TABLE "MAIN_USERADDITIONALINFO_USDEB3" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "USERADDITIONALINFO_ID" NUMBER(11) NOT NULL, "PERMISSION_ID" NUMBER(11) NOT NULL);
--
-- Create model Order
--
CREATE TABLE "MAIN_ORDER" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "KILOMETERS" NUMBER(11) NOT NULL CHECK ("KILOMETERS" >= 0), "PLACE" NVARCHAR2(155) NULL, "ORDERTIME_FROM" TIMESTAMP NULL, "ORDERTIME_TILL" TIMESTAMP NULL);
--
-- Create model Taxi
--
CREATE TABLE "MAIN_TAXI" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NUMBER" NVARCHAR2(20) NULL UNIQUE, "PRICE_PER_KM" NUMBER(11) NOT NULL CHECK ("PRICE_PER_KM" >= 0), "DRIVING_FROM" TIMESTAMP NULL, "DRIVING_TILL" TIMESTAMP NULL, "CAR" NVARCHAR2(155) NULL, "OWNER_ID" NUMBER(11) NOT NULL UNIQUE);
--
-- Add field taxi to order
--
ALTER TABLE "MAIN_ORDER" ADD "TAXI_ID" NUMBER(11) NOT NULL;
--
-- Add field user to order
--
ALTER TABLE "MAIN_ORDER" ADD "USER_ID" NUMBER(11) NOT NULL;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'MAIN_USERADDITIONALINFO_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "MAIN_USERADDITIONALINFO_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "MAIN_USERADDITIONALINFO_TR"
BEFORE INSERT ON "MAIN_USERADDITIONALINFO"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "MAIN_USERADDITIONALINFO_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'MAIN_USERADDITIONALINFO9D8F_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "MAIN_USERADDITIONALINFO9D8F_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "MAIN_USERADDITIONALINFO9D8F_TR"
BEFORE INSERT ON "MAIN_USERADDITIONALINFO_GROUPS"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "MAIN_USERADDITIONALINFO9D8F_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "MAIN_USERADDITIONALINFO_GROUPS" ADD CONSTRAINT "MAIN_USER_USERADDIT_6D52258B_F" FOREIGN KEY ("USERADDITIONALINFO_ID") REFERENCES "MAIN_USERADDITIONALINFO" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "MAIN_USERADDITIONALINFO_GROUPS" ADD CONSTRAINT "MAIN_USER_GROUP_ID_BC81CF83_F" FOREIGN KEY ("GROUP_ID") REFERENCES "AUTH_GROUP" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "MAIN_USERADDITIONALINFO_GROUPS" ADD CONSTRAINT "MAIN_USER_USERADDIT_D3AF38ED_U" UNIQUE ("USERADDITIONALINFO_ID", "GROUP_ID");
CREATE INDEX "MAIN_USERA_USERADDITI_6D52258B" ON "MAIN_USERADDITIONALINFO_GROUPS" ("USERADDITIONALINFO_ID");
CREATE INDEX "MAIN_USERA_GROUP_ID_BC81CF83" ON "MAIN_USERADDITIONALINFO_GROUPS" ("GROUP_ID");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'MAIN_USERADDITIONALINFO8394_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "MAIN_USERADDITIONALINFO8394_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "MAIN_USERADDITIONALINFO8394_TR"
BEFORE INSERT ON "MAIN_USERADDITIONALINFO_USDEB3"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "MAIN_USERADDITIONALINFO8394_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "MAIN_USERADDITIONALINFO_USDEB3" ADD CONSTRAINT "MAIN_USER_USERADDIT_A9349FDA_F" FOREIGN KEY ("USERADDITIONALINFO_ID") REFERENCES "MAIN_USERADDITIONALINFO" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "MAIN_USERADDITIONALINFO_USDEB3" ADD CONSTRAINT "MAIN_USER_PERMISSIO_EFF6954C_F" FOREIGN KEY ("PERMISSION_ID") REFERENCES "AUTH_PERMISSION" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "MAIN_USERADDITIONALINFO_USDEB3" ADD CONSTRAINT "MAIN_USER_USERADDIT_5668F47E_U" UNIQUE ("USERADDITIONALINFO_ID", "PERMISSION_ID");
CREATE INDEX "MAIN_USERA_USERADDITI_A9349FDA" ON "MAIN_USERADDITIONALINFO_USDEB3" ("USERADDITIONALINFO_ID");
CREATE INDEX "MAIN_USERA_PERMISSION_EFF6954C" ON "MAIN_USERADDITIONALINFO_USDEB3" ("PERMISSION_ID");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'MAIN_ORDER_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "MAIN_ORDER_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "MAIN_ORDER_TR"
BEFORE INSERT ON "MAIN_ORDER"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "MAIN_ORDER_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'MAIN_TAXI_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "MAIN_TAXI_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "MAIN_TAXI_TR"
BEFORE INSERT ON "MAIN_TAXI"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "MAIN_TAXI_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "MAIN_TAXI" ADD CONSTRAINT "MAIN_TAXI_OWNER_ID_51394A31_F" FOREIGN KEY ("OWNER_ID") REFERENCES "MAIN_USERADDITIONALINFO" ("ID") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "MAIN_ORDER_TAXI_ID_67271415" ON "MAIN_ORDER" ("TAXI_ID");
ALTER TABLE "MAIN_ORDER" ADD CONSTRAINT "MAIN_ORDE_TAXI_ID_67271415_F" FOREIGN KEY ("TAXI_ID") REFERENCES "MAIN_TAXI" ("ID") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "MAIN_ORDER_USER_ID_F3A58861" ON "MAIN_ORDER" ("USER_ID");
ALTER TABLE "MAIN_ORDER" ADD CONSTRAINT "MAIN_ORDE_USER_ID_F3A58861_F" FOREIGN KEY ("USER_ID") REFERENCES "MAIN_USERADDITIONALINFO" ("ID") DEFERRABLE INITIALLY DEFERRED;
COMMIT;


--
-- Create model LogEntry
--
CREATE TABLE "DJANGO_ADMIN_LOG" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "ACTION_TIME" TIMESTAMP NOT NULL, "OBJECT_ID" NCLOB NULL, "OBJECT_REPR" NVARCHAR2(200) NULL, "ACTION_FLAG" NUMBER(11) NOT NULL CHECK ("ACTION_FLAG" >= 0), "CHANGE_MESSAGE" NCLOB NULL, "CONTENT_TYPE_ID" NUMBER(11) NULL, "USER_ID" NUMBER(11) NOT NULL);

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'DJANGO_ADMIN_LOG_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "DJANGO_ADMIN_LOG_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "DJANGO_ADMIN_LOG_TR"
BEFORE INSERT ON "DJANGO_ADMIN_LOG"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "DJANGO_ADMIN_LOG_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "DJANGO_ADMIN_LOG" ADD CONSTRAINT "DJANGO_AD_CONTENT_T_C4BCE8EB_F" FOREIGN KEY ("CONTENT_TYPE_ID") REFERENCES "DJANGO_CONTENT_TYPE" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "DJANGO_ADMIN_LOG" ADD CONSTRAINT "DJANGO_AD_USER_ID_C564EBA6_F" FOREIGN KEY ("USER_ID") REFERENCES "MAIN_USERADDITIONALINFO" ("ID") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "DJANGO_ADM_CONTENT_TY_C4BCE8EB" ON "DJANGO_ADMIN_LOG" ("CONTENT_TYPE_ID");
CREATE INDEX "DJANGO_ADM_USER_ID_C564EBA6" ON "DJANGO_ADMIN_LOG" ("USER_ID");
COMMIT;


--
-- Create model Session
--
CREATE TABLE "DJANGO_SESSION" ("SESSION_KEY" NVARCHAR2(40) NOT NULL PRIMARY KEY, "SESSION_DATA" NCLOB NULL, "EXPIRE_DATE" TIMESTAMP NOT NULL);
CREATE INDEX "DJANGO_SES_EXPIRE_DAT_A5C62663" ON "DJANGO_SESSION" ("EXPIRE_DATE");
COMMIT;


--
-- Remove field place from order
--
ALTER TABLE "MAIN_ORDER" DROP COLUMN "PLACE";
--
-- Add field place_from to order
--
ALTER TABLE "MAIN_ORDER" ADD "PLACE_FROM" NVARCHAR2(155) NULL;
--
-- Add field place_to to order
--
ALTER TABLE "MAIN_ORDER" ADD "PLACE_TO" NVARCHAR2(155) NULL;
COMMIT;


--
-- Custom checks
--
create or replace TRIGGER create_time_order BEFORE UPDATE ON MAIN_ORDER 
FOR EACH ROW
BEGIN
 :NEW.ORDERTIME_FROM := SYSDATE;
END;


ALTER TABLE "MAIN_USERADDITIONALINFO"
  ADD CONSTRAINT email_constraint
  CHECK (REGEXP_LIKE (email, '[A-Za-z0-9._]+@[A-Za-z0-9._]+\.[A-Za-z]{1,50}'));


